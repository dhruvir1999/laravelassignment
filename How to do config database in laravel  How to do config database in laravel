Step 1: Create a Database
Create a database in your database server (MySQL, PostgreSQL, SQLite, etc.) where your Laravel application will store its data.

Step 2: Update .env File
Open the .env file in the root directory of your Laravel project and update the following lines with your database connection details:


DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=your_database_name
DB_USERNAME=your_database_username
DB_PASSWORD=your_database_password
Make sure to replace your_database_name, your_database_username, and your_database_password with your actual database details.

Step 3: Update config/database.php File
In the config/database.php file, you can configure additional options for your database connection. However, Laravel's default configuration should work for most cases. Ensure the following settings match your database configuration:

'mysql' => [
    'driver' => 'mysql',
    'host' => env('DB_HOST', '127.0.0.1'),
    'port' => env('DB_PORT', '3306'),
    'database' => env('DB_DATABASE', 'forge'),
    'username' => env('DB_USERNAME', 'forge'),
    'password' => env('DB_PASSWORD', ''),
    // ...
],
Step 4: Migrate the Database
After configuring the database, you need to run the migration to create the necessary tables. Open a terminal and run:

php artisan migrate
This command will execute any pending migrations and create the tables defined in your migration files.

Step 5: (Optional) Seed the Database (For Testing)
If you have seeders set up, you can use the following command to populate the database with sample data:

php artisan db:seed
Step 6: Run the Application
With the database configured and migrated, you can run your Laravel application:

php artisan serve
Visit the provided URL in your browser, and your Laravel application should be up and running with the configured database.
